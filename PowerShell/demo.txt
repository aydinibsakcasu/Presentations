# Primitives!
'Hello, world!'
1 + 2.5
$true, $false

# $ denotes a variable
# Variables can be assigned like this:
$n = 1 + 2.5
# Note the lack of output when assigning result to variable
# To use the variable...
$n
$n + 5
# Variables can also change types:
$n = '$n was ' + $n
$n

# Arrays
1,2,3
1..3
$a = 'a',0xB,[char]'c'
$a
$a.GetType().FullName

# Everything in PowerShell is a .NET object
$n.GetType().FullName
(1 + 2.5).GetType().FullName
$true.GetType().FullName

# You can call instance members...
$n.Length
$n.Split(' ')
# And static members, with types represented in [ ]
$g = [System.Guid]::NewGuid()
$d = [DateTime]::Now
$g,$d

# Because everything is an object, 
# PowerShell makes it easy to inspect objects
$d | Format-List
$d | Format-Table
$d | Get-Member

# Easy enough for familiar types, but what about something new?
$v = Get-Variable n
$v
Get-Variable n | Get-Member
$v.Description = 'N is the loneliest letter'
$v | Format-List
# Fun for demos, but practical?
Get-Variable w* | Format-List

# Other documentation is built in as well
help Format-Table
help Format-Table -Detailed
help *job*

# As a shell, one would expect standard shellish things
cd $Env:USERPROFILE\Downloads
dir
$zips = ls *.zip
$zips.Count
$zips | Get-Member

# PowerShell also provides more powerful ways to manipulate objects
$zips | Where { $_.Length -gt 2MB }
$zips | Where { $_.LastWriteTime -lt [DateTime]::Now.AddDays(-30) } | Sort Length | Select Name
$zips -match '\d+\.\d+'
$g = dir | Group Extension | Sort -Desc Count
$g
$g | Select -First 1 -ExpandProperty Group | Measure -Property Length -Sum -Max -Min

# dir, ls, where, sort, etc are all aliases for cmdlets
Get-Alias | where { 'Get-ChildItem','Where-Object' -contains $_.Definition } | Sort Definition
Set-Alias ss Select-String

# And now for something completely different...